
import tkinter as tk
from tkinter import PhotoImage, filedialog
import threading


# git commit -m "primeiro commit"string inicial para o label de status
texto_status_padrao = "Aguardando seleção de arquivo..."

# Dicionário de sequências alvo e nome do gene correspondente
sequencias_alvo = {"TCGTAAACGGCAAAAGCGTTGGTGCTCGTGATTTTGAC": "AcrF1"}
sequencia_alvo = {"ATGAAGTTCATCAAATACCTCAGCACCGCTCACCTGAACTATATGAATATCGCCGTTTACGAAAATGGCAGCAAAATCAAAGCCCGCGTTGAGAACGTCGTAAACGGCAAAAGCGTTGGTGCTCGTGATTTTGACTCAACGGAGCAACTGGAATCCTGGTTTTATGGTCTGCCTGGCAGTGGCCTCGGTCGTATTGAAAACGCTATGAATGAGATTTCCCGGCGTGAAAACCCCTGA":"AcrF1",}
sequencia_alvo = {"ATGATCGCTCAGCAGCACAAAGATACTGTCGCAGCGTGCGAAGCCGCCGAAGCCATCGCTATCGCTAAAG ATCAGGTATGGGATGGCGAGGGCTATACCAAGTACACGTTCGACGACAACAGCGTCCTGATCCAGTCGGG CACTACTCAGTATGCGATGGATGCCGACGACGCAGACAGCATCAAAGGCTATGCGGACTGGCTGGACGAT GAGGCTCGCTCCGCCGAAGCGTCGGAGATCGAGCGCCTGCTTGAATCGGTCGAGGAGGAGTAA":"AcrF2"}
sequencia_alvo = {"ATGATCGCTCAGCAGCACAAAGATACTGTCGCAGCGTGCGAAGCCGCCGAAGCCATCGCTATCGCTAAAG ATCAGGTATGGGATGGCGAGGGCTATACCAAGTACACGTTCGACGACAACAGCGTCCTGATCCAGTCGGG CACTACTCAGTATGCGATGGATGCCGACGACGCAGACAGCATCAAAGGCTATGCGGACTGGCTGGACGAT GAGGCTCGCTCCGCCGAAGCGTCGGAGATCGAGCGCCTGCTTGAATCGGTCGAGGAGGAGTAA":"AcrF2"}
sequencia_alvo = {"ATGATCGCTCAGCAGCACAAAGATACTGTCGCAGCGTGCGAAGCCGCCGAAGCCATCGCTATCGCAAAAG ATCAGGTCTGGGATGGCGAGGGCTATACCAAGTACACGTTCGACGACAACAGCGTTCTGATCCAGTCGGG CACTACTCAGTACGCGATGGATGCCGACGACGCAGACAGCATCAAAGGCTATGCGGACTGGCTGGACGAC GAAGCTCGCACCGCAGAAGATTCAGAAATCAAGCGCCTGCTCGAAGCGGTCGAAGATGAAGCCTGA":"AcrF2"}
sequencia_alvo = {"ATGACTAAGACCGCACAAATGATCGCTCAGCAGCACAAAGATACTGTCGCAGCGTGCGAAGCCGCCGAAG CCATCGCTATCGCAAAAGATCAGGTCTGGGATGGCGAGGGCTATACCAAGTACACGTTCGACGACAACAG CGTTCTGATCCAGTCGGGCACTACTCAGTACGCGATGGATGCCGACGACGCAGACAGCATCAAAGGCTAT GCGGACTGGCTGGACGACGAAGCTCGCACCGCAGAAGATTCAGAAATCAAGCGCCTGCTCGAAGCGGTCG AAGATGAAGCCTGA":"AcrF2"}
sequencia_alvo = {"ATGACTAAGACCGCACAAATGATCGCTCAGCAGCACAAAGATACTGTCGCAGCGTGCGAAGCCGCCGAAG CCATCGCTATCGCTAAAGATCAGGTATGGGATGGCGAGGGCTATACCAAGTACACGTTCGACGACAACAG CGTCCTGATCCAGTCGGGCACTACCCAGTACGCGATGGATGCCGACGACGCAGACAGCATCAAAGGCTAT GCGGACTGGCTGGACGACGAAGCTCGCTCCGCCGAAGCGTCGGAGATCGAGCGTCTGCTTGAATCGGTCG AGGAGGAGTGA":"AcrF2"}
sequencia_alvo = {"ATGAGCAGCACCATTTCAGATCGCATCGTCGCCCGCTCGGTTATTGATGCGGCTCGATTCATCCAGTCCT GGGAGGATGCGGACCCCGACAACCTGACTGAAAGCCAGGTTCTAGCCGCTTCTGGTTTCGCCGCCAGGCT CCATGAGGGGCTCCAGGCTACCGTCCTGCAACGGCTGGTGGACGAGTTCAATCATGAAGAGTATCGCGAG TTCAAGGCGTGGGAAGAGGCGCTGCTCAACGCAGATGGGCGGGTCGCGAGCAGCCCGTTTGCCGATTGGG GATGGTGGTATCGCATCGCCAACGTGATGCTGGCCACTGCCTCGCAGAACGTAGGTGTCACCTGGGGAAG CCGCGTCCATGGGCGTTTAATGGCTATTTTTCAGGACAAGTTCAAGCAGCGGTATGAGGAACAGGCATGA":"AcrF3"}
sequencia_alvo = {"ATGAGCAGCACGATTTCAGACCGCATCATCTCCCGCTCGGTTATTGAAGCGGCTCGATTCATTCAGTCCT GGGAAGATGCGGACCCCGACAACCTGACTGAAAGCCAGGTTCTGGCCGCTTCTAGTTTCGCCGCCAGGCT CCATGAGGGGCTTCAGGCTACCGTCCTGCAACGACTGGTGGACGAGTCCAATCGTGACGAATATCGCGAG TTCCAGGCCTGGGAAGAGGCGCTGCTCAACGCAGATGGACGAGTAACGAGCAACCCGTTTGCCGATTGGG GATGGTGGTATCGCATCGCCAACGTGATGCTGGCCACTGCCTCGCAGAACGTAGGCGTCGCCTGGGGAAG CCATGTCCATGGTCGTTTAATGGCTATTTTTCAGGACAGGTTCCAACAGCATTATGAGGATGAGGAATGC TGA":"AcrF3"}
sequencia_alvo = {"ATGAGCAGCACGATTTCAGACCGCATCATCTCCCGCTCGGTTATTGAAGCGGCTCGATTCATTCAGTCCT GGGAAGATGCGGACCCCGACAACCTGACTGAAAGCCAGGTTCTGGCCGCTTCTAGTTTCGCCGCCAGGCT CCATGAGGGGCTTCAGGCTACCGTCCTGCAACGACTGGTGGACGAGTCCAATCGTGACGAATATCGCGAG TTCCAGGCCTGGGAAGAGGCGCTGCTCAACGCAGATGGACGAGTAACGAGCAACCCGTTTGCCGATTGGG GATGGTGGTATCGCATCGCCAACGTGATGCTGGCCACTGCCTCGCAGAACGTAGGCGTCGCCTGGGGAAG CCATGTCCATGGTCGTTTAATGGCTATTTTTCAGGACAGGTTCCAACAGCATTATGAGGATGAGGAATGC TGA":"AcrF3"}
sequencia_alvo = {"ATGAGCAACACGATTTCAGATCGCATCGTCGCCCGCTCGGTTATTGAAGCGGCTCGATTCATCCAGTCCT GGGAAGATGCAGACCCCGACAGCCTGACTGAAGACCAGGTCCTGGCCGCCGCTGGTTTTGCCGCCAGGCT CCATGAGGGGCTCCAGGCTACCGTCCTGCAACGGCTGGTGGACGAGTCCAATCATGAAGAGTATCGCGAG TTCAAGGCATGGGAAGAGGCGCTGCTCAACGCAGATGGGCGGGTCGCGAGCAGCCCGTTTGCTGATTGGG GATGGTGGTATCGCATCGCCAACGTGATGCTGGCCACTGCCTCGCAGAACGTAGGTGTCACCTGGGGAAG CCGCGTCCATGGGCGTTTAATGGCTATTTTTCAGGACAAGTTCAAGCAGCGGTATGAGGAACAGGCATGA":"AcrF3"}
sequencia_alvo = {"ATGTTGACTGAGAATCATCAGGAGGTTACCCCAATGAGCAACACGATTTCAGATCGCATCGTCGCCCGCT CGGTTATTGAAGCGGCTCGATTCATCCAGTCCTGGGAAGATGCAGACCCCGACAGCCTGACTGAAGACCA GGTCCTGGCCGCCGCTGGTTTTGCCGCCAGGCTCCATGAGGGGCTCCAGGCTACCGTCCTGCAACGGCTG GTGGACGAGTCCAATCATGAAGAGTATCGCGAGTTCAAGGCATGGGAAGAGGCGCTGCTCAACGCAGATG GGCGGGTCGCGAGCAGCCCGTTTGCTGATTGGGGATGGTGGTATCGCATCGCCAACGTGATGCTGGCCAC TGCCTCGCAGAACGTAGGTGTCACCTGGGGAAGCCGCGTCCATGGGCGTTTAATGGCTATTTTTCAGGAC AAGTTCAAGCAGCGGTATGAGGAACAGGCATGA":"AcrF3"}
sequencia_alvo = {"ATGAGCAGCACGATTTCAGATCGCATCGTCGCCCACTCGGTTATTGATGCGGCTCGATTCATCCAGTCCT GGGAGGATGCGGACCCCGACAACCTGACTGAAAGCCAGGTTCTGGCCGCTGCTGGTTTCGCCGCCAGGCT CCATGAGGGGCTCCAGGCTACCGTCCTGCAACGGCTGGTGGACGAGTCCAATCATGAAGAGTATCGCGAG TTCAAGGCATGGGAAGAGGCGCTGCTCAACGCAGATGGGCGGGTCGCGAGCAGCCCGTTTGCTGATTGGG GATGGTGGTATCGCATCGCCAACGTGATGCTGGCCACTGCCTCGCAGAACGTAGGTGTCACCTGGGGAAG CCGCGTCCATGGGCGTTTAATGGCTATTTTTCAGGACAAGTTCAAGCAGCGGTATGAGGAACAGGCATGA":"AcrF3"}
sequencia_alvo = {"ATGAGCAGCACGATTTCAGACCGCATCATCTCCCGCTCGGTTATTGAAGCGGCTCGATTCATTCAGTCCT GGGAAGATGCGGACCCCGACAACCTGACTGAAAGCCAGGTTCTGGCCGCTTCTAGTTTCGCCGCCAGGCT CCATGAGGGGCTTCAGGCTACCGTCCTGCAACGACTGGTGGACGAGTCCAATCGTGACGAATATCGCGAG TTCCAGGCCTGGGAAGAGGCGCTGCTCAACGCAGATGGACGAGTAACGAGCAACCCGTTTGCCGATTGGG GATGGTGGTATCGCATCGCCAACGTGATGCTGGCCACTGCCTCGCAGAACGTAGGCGTCGCCTGGGGAAG CCATGTCCATGGTCGTTTAATGGCTATTTTTCAGGACAGGTTCCAACAGCATTATGAGGATGAGGAATGC TGA":"AcrF3"}
sequencia_alvo = {"ATGAGCAGCACGATTTCAGACCGCATCATCTCCCGCTCGGTTATTGAAGCGGCTCGATTCATTCAGTCCT GGGAAGATGCGGACCCCGACAACCTGACTGAAAGCCAGGTTCTGGCCGCTTCTAGTTTCGCCGCCAGGCT CCATGAGGGGTTCCAGGCTACCGTCCTGCAACGACTCGTGGACGACTCCAATCATGAAGAGTATCGCGAG TTCAAGGCGTGGGAAGAGGCGCTACTCAACGCAGATGGACGAGTCGCGAGCAACCCATTTGCCGATTGGG GGTGGTGGTATCGCATCGCCAACGTGATGCTTGCCACTGCCTCGCAGAACATAGGCGTCGCCTGGGGAAG CCACGTACATGGTCGTTTAATGGCTATTTTTCAGGACAGGTTCCAACAGCATTATGAGGATGAGGAATGC TGA":"AcrF3"}
sequencia_alvo = {"ATGAGCAACACGATTTCAGATCGCATCGTCGCGCGCTCGGTTATTGATGCGGCTCGATTCATCCAGTCGT GGGAAGATGCAGACCCCGACAGCCTGACTGAAAGCCAGGTTCTGGCCGCCGCTGGTTTCGCCGCCAGGCT CCATGAGGGGCTCCAGGCTACCGTCCTGCAACGACTGGTGGACGAGTCCAATCATGAAGAGTATCGCGAG TTCAAGGCATGGGAAGAGGCGCTGCTCAACGCAGATGGGCGGGTCGCGAGCAGCCCGTTTGCCGATTGGG GATGGTGGTATCGCATCGCCAACGTGATGCTGGCCACTGCCTCGCAGAACTTAGGCGTCACCTGGGGAAG CCGCGTCCATGGGCGTTTAATGGCTATTTTTCAGGACAAGTTCAAGCAGCGGTATGAGGAACAGGCATGA":"AcrF3"}
sequencia_alvo = {"ATGAGTATAATAGCTATTAATAAAGAAATCCGTGCAAAAGGTTACAAAGTAACAGGAACACACCAAGGAT ATATAGCACAAATCAATTTTGACGGTACAGGAAACGAATATCCTTTACCAGCTACATGGGATGAGTTCAT TGAAACATTTAAAGATGGTTGGAATGGTACTTACGAAGACGAACAAGCGTTCTTTAACGACATGCAGGAA GTTGCATTAAAAGAAATCTTAGACGAATTAACAGGCGCTTTATTTTGTCAAGATATTACTACGTATGATT TTACTATAGATGACGTTAAAAAGAAAGTTATTACACTAGATAAACCCACATTCGAAGAAGATGCCGAAGA CTTGATAATAGAATTTGATTCTACTTGCTTTTGGGATGCTACAGTAGAAAACGATAAAATAAAGATTACT GTAAGAAACAAAAGTAGATACTGA":"Acr"}
sequencia_alvo = {"ATGGAAAAGAAGCTTTCAGATGCTCAGGTTGCGCTGGTAGCAGCCTGGAGAAAATACCCCGATCTTCGGG AGTCTCTTGAAGAGGCAGCCTCGATCCTGTCGCTTATCGTGTTTCAGGCCGAAACACTCTCTGATCAGGC CAATGAGTTGGCGAACTATATTCGCCGCCAGGGGCTGGAGGAGGCTGAAGGCGCCTGCCGAAATATTGAC ATCATGAGGGCGAAGTGGGTTGAGGTGTGCGGCGAAGTCAATCAACACGGGATTCGAGTCTACGGCGACG CCATAGACCGCGATGTTGACTGA":"AcrE1"}
sequencia_alvo = {"ATGGAAAAGAAGCTTTCAGATGCTCAGGTTGCGCTGGTAGCAGCCTGGAGAAAATACCCCGATCTTCGGG AGTCTCTTGAAGAGGCAGCCTCGATCCTGTCGCTTATCGTGTTTCAGGCCGAAACACTCTCTGATCAGGC CAATGAGTTGGCGAACTATATTCGCCGCCAGGGGCTGGAGGAGGCTGAAGGCGCCTGCCGAAATATTGAC ATCATGAGGGCGAAGTGGGTTGAGGTGTGCGGCGAAGTCAATCAACACGGGATTCGAGTCTACGGCGACG CCATAGACCGCGATGTTGACTGA":"AcrE1"}
sequencia_alvo = {"ATGAGCCGACCAACAGTCGTTACGGTGACGGAAACCCCCAGGAATCCGGGAAGCTACGAGGTCAACGTAG AGCGGGATGGCAAAATGGTCGTTGGCCGGGCCCGCGCGGGAAGCGATCCCGGCGCAGCTGCGGCGAAGGC CATGCAGATGGCCATGGAGTGGGGGAGCCCGAACTACGTCATTCTCGGCAGCAACAAGGTTCTTGCGTTC ATACCGGAGCAACTGCGGGTGAAAATGTGA":"Acr"}
sequencia_alvo = {"ATGAGCCGACCAACAGTCGTTACGGTGACGGAAACCCCCAGGAATCCGGGAAGCTACGAGGTCAACGTAG AGCGGGATGGCAAAATGGTCGTTGGCCGGGCCCGCGCGGGAAGCGATCCCGGCGCAGCTGCGGCGAAGGC CATGCAGATGGCCATGGAGTGGGGGAGCCCGAACTACGTCATTCTCGGCAGCAACAAGGTTCTTGCGTTC ATACCGGAGCAACTGCGGGTGAAAATGTGA":"Acr"}
sequencia_alvo = {"ATGACTAAGACCGCACAAATGATCGCTCAGCAGCACAAAGATACTGTCGCAGCGTGCGAAGCCGCCGAAG CCATCGCTATCGCAAAAGATCAGGTCTGGGATGGCGAGGGCTATACCAAGTACACGTTCGACGACAACAG CGTTCTGATCCAGTCGGGCACTACTCAGTACGCGATGGATGCCGACGACGCAGACAGCATCAAAGGCTAT GCGGACTGGCTGGACGACGAAGCTCGCACCGCAGAAGATTCAGAAATCAAGCGCCTGCTCGAAGCGGTCG AAGATGAAGCCTGA":"Acr"}

  



def ler_fasta(arquivo):
    """
    Função para ler um arquivo FASTA e verificar se as sequências alvo estão presentes.
    """
    sequencias_encontradas = []
    with open(arquivo, 'r') as f:
        cabecalho = None
        sequencia_atual = ''
        for linha in f:
            if linha.startswith('>'):
                if sequencia_atual:
                    for sequencia_alvo, nome_gene in sequencias_alvo.items():
                        if sequencia_alvo in sequencia_atual:
                            sequencias_encontradas.append(nome_gene)
                            print(f"Sequência encontrada: {sequencia_alvo} - Proteína correspondente: {nome_proteina}")
                cabecalho = linha.strip()[1:]
                sequencia_atual = ''
            else:
                sequencia_atual += linha.strip()
        # Verificar última sequência, se aplicável
        if sequencia_atual:
            for sequencia_alvo, nome_gene in sequencias_alvo.items():
                if sequencia_alvo in sequencia_atual:
                    sequencias_encontradas.append(nome_gene)
                    print(f"Sequência encontrada: {sequencia_alvo} - ene correspondente: {nome_gene}")
    return sequencias_encontradas

def identificar_sequencias():
    """
    Função para identificar sequências de interesse em um arquivo FASTA.
    """
    arquivo_fasta = filedialog.askopenfilename(title="Selecione o arquivo FASTA")
    if arquivo_fasta:
        print(f"Arquivo selecionado: {arquivo_fasta}")
        sequencias_encontradas = ler_fasta(arquivo_fasta)
        print(f"Sequências encontradas: {sequencias_encontradas}")
        if sequencias_encontradas:
            texto_saida.config(state=tk.NORMAL)
            texto_saida.delete(1.0, tk.END)
            for proteina in sequencias_encontradas:
                texto_saida.insert(tk.END, f"Gene encontrado: {proteina}\n", "cor_verde")
            texto_saida.config(state=tk.DISABLED)
        else:
            texto_saida.config(state=tk.NORMAL)
            texto_saida.delete(1.0, tk.END)
            texto_saida.insert(tk.END, "Nenhum Gene Anti-CRISPR encontrado!", "cor_vermelha")
            texto_saida.config(state=tk.DISABLED)


# Função principal
def main():
    global texto_saida
    janela = tk.Tk()
    janela.title("PhAntiCRISPR")
    janela.iconbitmap ("imagens\dna.ico.ico")
    janela.configure(background= "black")
    janela.resizable(False,False)


    botao_selecionar = tk.Button(janela, text="Selecionar Arquivo", command=identificar_sequencias)
    botao_selecionar.pack()

    texto_saida = tk.Text(janela, height=10, width=50,font=("Arial", 16))
    texto_saida.pack()

    texto_saida.tag_config("cor_verde", foreground="green")
    texto_saida.tag_config("cor_vermelha", foreground="red")


    janela.mainloop()

if __name__ == "__main__":
    main()

